using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ADODAL
{
    public sealed class SqlHelper
    {
        //数据库连接字符串
        public static readonly string connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["con"].ConnectionString;

        #region 基础方法

        /// <summary>
        /// 为执行命令准备参数
        /// </summary>
        /// <param name="cmd">SqlCommand 命令</param>
        /// <param name="conn">已经存在的数据库连接</param>
        /// <param name="trans">数据库事物处理</param>
        /// <param name="cmdType">SqlCommand命令类型 (存储过程， T-SQL语句， 等等。)</param>
        /// <param name="cmdText">Command text，T-SQL语句 例如 Select * from Products</param>
        /// <param name="cmdParms">返回带参数的命令</param>
        private static void PrepareCommand(SqlConnection conn, SqlCommand cmd, string cmdText, CommandType cmdType, SqlTransaction trans, SqlParameter[] cmdParms)
        {
            //判断数据库连接状态
            if (conn.State != ConnectionState.Open)
                conn.Open();
            cmd.Connection = conn;
            cmd.CommandText = cmdText;
            cmd.CommandType = cmdType;
            //事务
            if (trans != null)
                cmd.Transaction = trans;
            if (cmdParms != null)
                cmd.Parameters.AddRange(cmdParms);
        }

        #endregion

        #region ExecteNonQuery方法

        /// <summary>
        /// 执行sql语句返回受影响行数
        /// </summary>
        /// <param name="connectionString">数据库连接字符串</param>
        /// <param name="cmdType">sql类型</param>
        /// <param name="cmdText">sql</param>
        /// <param name="cmdParams">参数</param>
        /// <returns>受影响行数</returns>
        public static int ExecteNonQuery(string connectionString, CommandType cmdType, string cmdText, params SqlParameter[] cmdParams)
        {
            SqlCommand cmd = new SqlCommand();
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                PrepareCommand(conn, cmd, cmdText, cmdType, null, cmdParams);
                return cmd.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// 执行sql语句返回受影响行数
        /// </summary>
        /// <param name="cmdType">sql类型</param>
        /// <param name="cmdText">sql</param>
        /// <param name="cmdParams">参数</param>
        /// <returns>受影响行数</returns>
        public static int ExecteNonQuery(CommandType cmdType, string cmdText, params SqlParameter[] cmdParams)
        {
            return ExecteNonQuery(connectionString, cmdType, cmdText, cmdParams);
        }

        /// <summary>
        /// 执行sql语句返回受影响行数，执行存储过程时使用
        /// </summary>
        /// <param name="cmdText">sql</param>
        /// <param name="cmdParams">参数</param>
        /// <returns>受影响行数</returns>
        public static int ExecteNonQueryProducts(string cmdText, params SqlParameter[] cmdParams)
        {
            return ExecteNonQuery(CommandType.StoredProcedure, cmdText, cmdParams);
        }

        /// <summary>
        /// 执行sql语句返回受影响行数，执行单纯sql时使用
        /// </summary>
        /// <param name="cmdText">sql</param>
        /// <param name="cmdParams">参数</param>
        /// <returns>受影响行数</returns>
        public static int ExecteNonQueryText(string cmdText, params SqlParameter[] cmdParams)
        {
            return ExecteNonQuery(CommandType.Text, cmdText, cmdParams);
        }

        #endregion

        #region ExecuteScalar方法
        
        /// <summary>
        /// 执行sql语句返回结果的第一行第一列
        /// </summary>
        /// <param name="connectionString">数据库连接字符串</param>
        /// <param name="cmdType">sql类型</param>
        /// <param name="cmdText">sql</param>
        /// <param name="cmdParams">参数</param>
        /// <returns>结果的第一行第一列</returns>
        public static object ExecuteScalar(string connectionString, CommandType cmdType, string cmdText, params SqlParameter[] cmdParams)
        {
            SqlCommand cmd = new SqlCommand();
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                PrepareCommand(conn, cmd, cmdText, cmdType, null, cmdParams);
                return cmd.ExecuteScalar();
            }
        }

        /// <summary>
        /// 执行sql语句返回结果的第一行第一列
        /// </summary>
        /// <param name="cmdType">sql类型</param>
        /// <param name="cmdText">sql</param>
        /// <param name="cmdParams">参数</param>
        /// <returns>结果的第一行第一列</returns>
        public static object ExecuteScalar(CommandType cmdType, string cmdText, params SqlParameter[] commandParameters)
        {
            return ExecuteScalar(SqlHelper.connectionString, cmdType, cmdText, commandParameters);
        }

        /// <summary>
        /// 执行sql语句返回结果的第一行第一列，执行存储过程时使用
        /// </summary>
        /// <param name="cmdText">sql</param>
        /// <param name="cmdParams">参数</param>
        /// <returns>结果的第一行第一列</returns>
        public static object ExecuteScalarProducts(string cmdText, params SqlParameter[] commandParameters)
        {
            return ExecuteScalar(SqlHelper.connectionString, CommandType.StoredProcedure, cmdText, commandParameters);
        }
        
        /// <summary>
        /// 执行sql语句返回结果的第一行第一列，执行单纯sql时使用
        /// </summary>
        /// <param name="cmdText">sql</param>
        /// <param name="cmdParams">参数</param>
        /// <returns>结果的第一行第一列</returns>
        public static object ExecuteScalarText(string cmdText, params SqlParameter[] commandParameters)
        {
            return ExecuteScalar(SqlHelper.connectionString, CommandType.Text, cmdText, commandParameters);
        }

        #endregion

        #region 记录是否存在

        /// <summary>
        /// 记录是否存在
        /// </summary>
        /// <param name="strSql">sql</param>
        /// <returns>记录是否存在</returns>
        public static bool IsExist(string strSql)
        {
            return IsExist(strSql, null);
        }

        /// <summary>
        /// 记录是否存在
        /// </summary>
        /// <param name="strSql">sql</param>
        /// <param name="cmdParams">查询所需参数</param>
        /// <returns>记录是否存在</returns>
        public static bool IsExist(string strSql, params SqlParameter[] cmdParams)
        {
            int cmdresult = Convert.ToInt32(ExecuteScalar(connectionString, CommandType.Text, strSql, cmdParams));
            return cmdresult > 0;
        }

        #endregion
    }
}
